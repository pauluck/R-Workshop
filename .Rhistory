calculateAvg("w 34")
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
paste(player)
if(player!=""){
value <- df_chess_avg[player,"new"]
}
else value <- NULL
return(value)
}
calculateAvg("w 34")
str_extract_all("w 34","\\d{1,}")
unlist(str_extract_all("w 34","\\d{1,}"))
unlist(str_extract_all("w 34","\\d{1,}"))[1]
unlist(str_extract_all("w 34","\\d{1,}"))[[1]]
paste(str_extract_all("w 34","\\d{1,}"))
grep("\\d{1,}","w 34")
grep("\\d{1,}","w 34",value=TRUE)
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
paste(player)
if(player!=""){
value <- df_chess_avg[unlist(player),"new"]
}
else value <- NULL
return(value)
}
calculateAvg("w 34")
df_chess_subset[c(3:7)]
lapply(df_chess_subset[c(3:7)], function(x) calculateAvg(x))
calculateAvg("BB")
str(calculateAvg("BB"))
nchar(calculateAvg("BB"))
nchar(calculateAvg("212"))
calculateAvg("212")
paste(str_extract_all("212","\\d{1,}"))
calculateAvg("0")
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
if(str_length(player)==0){player <- 0}
return(df_chess_avg[unlist(player),"new"])
}
calculateAvg("BB")
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
return(str_length(player))
# if(str_length(player)==0){player <- 0}
#  return(df_chess_avg[unlist(player),"new"])
}
calculateAvg("BB")
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
return(c(player,str_length(player)))
# if(str_length(player)==0){player <- 0}
#  return(df_chess_avg[unlist(player),"new"])
}
calculateAvg("BB")
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
return(c(player,str_length(player),nchar(player)))
# if(str_length(player)==0){player <- 0}
#  return(df_chess_avg[unlist(player),"new"])
}
calculateAvg("BB")
paste(str_extract_all("bb","\\d{1,}"))
unlist(str_extract_all("bb","\\d{1,}"))
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
return(c(player,length(player),nchar(player)))
# if(str_length(player)==0){player <- 0}
#  return(df_chess_avg[unlist(player),"new"])
}
calculateAvg("BB")
unlist(str_detect("bb","\\d{1,}"))
unlist(str_detect("bb1","\\d{1,}"))
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
if(!str_detect(x,"\\d")){player <- 0}
return(df_chess_avg[unlist(player),"new"])
}
calculateAvg("BB")
calculateAvg("20")
calculateAvg("10")
calculateAvg("110")
calculateAvg("kh")
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
if(!str_detect(x,"\\d")){return(NULL)}
else return(df_chess_avg[unlist(player),"new"])
}
calculateAvg("BB")
calculateAvg <- function(x){
player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
if(!str_detect(x,"\\d")){return(NA)}
else return(df_chess_avg[unlist(player),"new"])
}
calculateAvg("BB")
lapply(df_chess_subset[c(3:7)], function(x) calculateAvg(x))
sapply(df_chess_subset[c(3:7)], function(x) calculateAvg(x))
vapply(df_chess_subset[c(3:7)], function(x) calculateAvg(x))
apply(df_chess_subset[c(3:7)], function(x) calculateAvg(x))
df_chess_avg <- df_chess_subset %>%
mutate(new = gsub("^.*R:\\s+(\\d+)(\\D|\\s).*$","\\1",Rating),
round1 = calculateAvg(R1))
df_chess_avg
df_chess_subset[str_detect(df_chess_subset, "\\d")]
library(dplyr) # Selecting and filtering
library(magrittr) # Pipes
library(knitr) # kable
library(stringr)
RawFile <- paste(readLines("C:\\Users\\Minnie\\Documents\\tournamentinfo.txt"), collapse = "\n")
splitRawFile <- gsub("\n\\s+|--+","",pasteRawFile) %>%
gsub("\\|\\s*\n", "\n", .) %>%
strsplit(.,"\n")
#    gsub("\\s+\\d+\\s/\\sR:\\s+?|\\s+->\\d+\\s+?","",.)
df_chess.in <- textConnection(splitRawFile[[1]])
df_chess <- read.table(textConnection(splitRawFile[[1]]), sep="|", skip = 1)
df_chess_subset <- df_chess[c(1,2,4:12)]
colnames(df_chess_subset) <- c("Num","Player","R1","R2","R3","R4","R5","R6","R7","State","Rating")
RawFile <- paste(readLines("C:\\Users\\Minnie\\Documents\\tournamentinfo.txt"), collapse = "\n")
splitRawFile <- gsub("\n\\s+|--+","",RawFile) %>%
gsub("\\|\\s*\n", "\n", .) %>%
strsplit(.,"\n")
#    gsub("\\s+\\d+\\s/\\sR:\\s+?|\\s+->\\d+\\s+?","",.)
df_chess.in <- textConnection(splitRawFile[[1]])
df_chess <- read.table(textConnection(splitRawFile[[1]]), sep="|", skip = 1)
df_chess_subset <- df_chess[c(1,2,4:12)]
colnames(df_chess_subset) <- c("Num","Player","R1","R2","R3","R4","R5","R6","R7","State","Rating")
df_chess_subset[str_detect(df_chess_subset, "\\d")]
df_chess_subset$Rating <- as.character(gsub("^.*R:\\s+(\\d+)(\\D|\\s).*$","\\1",df_chess_subset$Rating))
df_chess_subset$Rating
df_chess_subset
df_chess_subset[3:5] <- as.character(str_extract_all("\\d",df_chess_subset[3:5]))
str_extract_all("\\d",df_chess_subset[3:5])
df_chess_subset[3:5]
str_extract_all(df_chess_subset[3:5],"\\d")
df_chess_subset[3:5] <- as.character(str_extract_all(df_chess_subset[3:5]),"\\d"))
df_chess_subset[3:5] <- as.character(str_extract_all(df_chess_subset[3:5]),"\\d")
df_chess_subset[3:5] <- as.character(str_extract_all(df_chess_subset[3:5]),"\\d"))
df_chess_subset[3:5] <- as.character(str_extract_all(df_chess_subset[3:5],"\\d"))
df_chess_subset
as.numeric(str_extract_all(df_chess_subset[3:5],"\\d"))
as.numeric(unlist(str_extract_all(df_chess_subset[3:5],"\\d"))
)
as.character(unlist(str_extract_all(df_chess_subset[3:5],"\\d"))
)
str_extract_all(df_chess_subset[3:5],"\\d")
str_extract_all(df_chess_subset[3],"\\d")
str_extract_all(df_chess_subset[3],"\\d")
df_chess_subset[3]
df_chess_subset <- df_chess[c(1,2,4:12)]
colnames(df_chess_subset) <- c("Num","Player","R1","R2","R3","R4","R5","R6","R7","State","Rating")
df_chess_subset[3]
str_extract_all(df_chess_subset[3],"\\d")
str_extract(df_chess_subset[3],"\\d\\d?")
str_extract_all(df_chess_subset[3],"\\d\\d?")
as.character(str_extract_all(df_chess_subset[3],"\\d\\d?"))
df_chess_subset[3]
str_extract_all(c[" W  39"," L  79"],"\\d\\d?"))
str_extract_all(c(" W  39"," L  79"),"\\d\\d?"))
str_extract_all(c(" W  39"," L  79"),"\\d\\d?")
str(c(" W  39"," L  79"))
str(df_chess_subset[3])
str(as.character(df_chess_subset[3])
)
str(paste(df_chess_subset[3])
)
str(as.numeric(df_chess_subset[3]))
str((df_chess_subset[3]))
str(unlist(df_chess_subset[3]))
str((df_chess_subset$R1))
str(as.character(df_chess_subset$R1))
str(as.character(df_chess_subset[3:4]))
str(as.character(df_chess_subset[3]))
str(as.character(df_chess_subset$R1))
lapply(df_chess_subset[1:3],function(x) str_extract_all(x,"\\d"))
lapply(df_chess_subset[1:3],function(x) str_extract_all(x,"\\d\\d?"))
lapply(df_chess_subset[3:7],function(x) str_extract_all(x,"\\d\\d?"))
lapply(df_chess_subset[3:9],function(x) str_extract_all(x,"\\d\\d?"))
df_chess_subset[3:9] <- lapply(df_chess_subset[3:9],function(x) str_extract_all(x,"\\d\\d?"))
df_chess_subset
df_chess_subset <- df_chess[c(1,2,4:12)]
colnames(df_chess_subset) <- c("Num","Player","R1","R2","R3","R4","R5","R6","R7","State","Rating")
df_chess_subset[3:9] <- lapply(df_chess_subset[3:9],function(x) str_extract_all(x,"\\d{1,}"))
df_chess_subset[3:9] <- lapply(df_chess_subset[3:9],function(x) str_extract_all(x,"\\d{1,}"))
df_chess_subset <- df_chess[c(1,2,4:12)]
colnames(df_chess_subset) <- c("Num","Player","R1","R2","R3","R4","R5","R6","R7","State","Rating")
df_chess_subset[3:9] <- lapply(df_chess_subset[3:9],function(x) str_extract_all(x,"\\d{1,}"))
df_chess_subset
df_chess_subset$Rating <- as.character(gsub("^.*R:\\s+(\\d+)(\\D|\\s).*$","\\1",df_chess_subset$Rating))
df_chess_subset
df_chess_subset[12,7]
calculateAvg <- function(x){
return(x[x>0])
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
calculateAvg(c("1","3",""))
length(calculateAvg(c("1","3","")))
length(calculateAvg(df_chess_subset[1,3:7]))
length(calculateAvg(df_chess_subset[62,3:7]))
calculateAvg(df_chess_subset[62,3:7])
calculateAvg(df_chess_subset[62,3:7][1])
calculateAvg(df_chess_subset[1,3:7][1])
calculateAvg(df_chess_subset[1,3:7][[1])
calculateAvg(df_chess_subset[1,3:7][[1]])
calculateAvg(as.character(df_chess_subset[1,3:7])
)
calculateAvg(as.numeric(df_chess_subset[1,3:7])
)
calculateAvg((df_chess_subset[1,3:7]))
calculateAvg(unlist(df_chess_subset[1,3:7]))
calculateAvg(unlist(df_chess_subset[55,3:7]))
nchar(calculateAvg(unlist(df_chess_subset[55,3:7])))
length(calculateAvg(unlist(df_chess_subset[55,3:7])))
length(calculateAvg(unlist(df_chess_subset[1,3:7])))
length(calculateAvg(unlist(df_chess_subset[62,3:7])))
calculateAvg <- function(x){
return(lapply(x[x>0], function(x) df_chess_subset[x,"Rating"]))
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
length(calculateAvg(unlist(df_chess_subset[62,3:7])))
calculateAvg(unlist(df_chess_subset[62,3:7]))
calculateAvg(unlist(df_chess_subset[1,3:7]))
apply(calculateAvg(unlist(df_chess_subset[1,3:7])),function(x) mean)
apply(calculateAvg(unlist(df_chess_subset[1,3:7])),function(x) mean(x))
apply(calculateAvg(unlist(df_chess_subset[1,3:7])),2,function(x) mean(x))
apply(calculateAvg(unlist(df_chess_subset[1,3:7])),1,function(x) mean(x))
avg<-calculateAvg(unlist(df_chess_subset[1,3:7]))
str(avg)
?apply
str(avg[[1]])
str(avg[1])
lapply(avg,function(x) mean(x))
sapply(avg,function(x) mean(x))
mean(avg)
as.numeric(avg)
mean(as.numeric(avg))
calculateAvg <- function(x){
return(mean
(as.numeric(lapply(x[x>0], function(x) df_chess_subset[x,"Rating"])))
)
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
avg<-calculateAvg(unlist(df_chess_subset[1,3:7]))
avg
avg <- calculateAvg(df_chess_subset[3:9])
avg
avg <- calculateAvg(unlist(df_chess_subset[3:9]))
avg
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(unlist(df_chess_subset[3:9])))
df_chess_avg
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(df_chess_subset[3:9]))
df_chess_avg
calculateAvg <- function(x){
# return(mean
# (as.numeric(lapply(x[x>0], function(x) df_chess_subset[x,"Rating"])))       )
return(unlist(x))
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(df_chess_subset[3:9]))
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(R1,R2))
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(c(R1,R2)))
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(paste(R1,R2,R3)))
df_chess_avg
avg<-calculateAvg(unlist(df_chess_subset[,3:7]))
avg
calculateAvg <- function(x){
return(mean
(as.numeric(lapply(x[x>0], function(x) df_chess_subset[x,"Rating"])))       )
# return(unlist(x))
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
avg<-calculateAvg(unlist(df_chess_subset[,3:7]))
avg
unlist(df_chess_subset[,3:7])
avg<-calculateAvg((df_chess_subset[,3:7]))
avg
(df_chess_subset[,3:7])
avg<-lapply(df_chess_subset[,3:7], function(x) calculateAvg(unlist(x)))
avg
lapply(df_chess_subset[,3:7], function(x) calculateAvg(unlist(x)))
avg<-lapply(df_chess_subset[,3:7], function(x) calculateAvg((x)))
avg
avg<-lapply(df_chess_subset[3:7], function(x) calculateAvg((x)))
lapply(df_chess_subset[3:7], function(x) calculateAvg((x)))
df_chess_subset[3:7]
str(df_chess_subset[3:7])
head(str(df_chess_subset[3:7]))
lapply(df_chess_subset[3:7], function(x) calculateAvg((unlist(x))))
calculateAvg <- function(x){
# return(mean
#       (as.numeric(lapply(x[x>0], function(x) df_chess_subset[x,"Rating"])))       )
return(x)
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
lapply(df_chess_subset[3:7], function(x) calculateAvg((unlist(x))))
lapply(paste(df_chess_subset[3:7]), function(x) calculateAvg((unlist(x))))
sapply(paste(df_chess_subset[3:7]), function(x) calculateAvg((unlist(x))))
lapply(paste(df_chess_subset[,3:7]), function(x) calculateAvg((unlist(x))))
avg<-lapply(df_chess_subset[,3:7], function(x) calculateAvg((unlist(x))))
lapply(df_chess_subset[,3:7], function(x) calculateAvg((unlist(x))))
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(paste(R1,R2,R3,R4,R5,R6,R7)))
df_chess_avg
calculateAvg <- function(x){
return(mean
(as.numeric(lapply(x[x>0], function(x) df_chess_subset[x,"Rating"])))       )
#  return(x)
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(paste(R1,R2,R3,R4,R5,R6,R7)))
df_chess_avg
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(c(R1,R2,R3,R4,R5,R6,R7)))
df_chess_avg
calculateAvg <- function(x){
# return(mean
#        (as.numeric(lapply(x[x>0], function(x) df_chess_subset[x,"Rating"])))       )
return(x)
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
df_chess_avg <- df_chess_subset %>%
mutate(new = calculateAvg(c(R1,R2,R3,R4,R5,R6,R7)))
calculateAvg((unlist(df_chess_subset[,3:7])))
calculateAvg((df_chess_subset[,3:7]))
calculateAvg((df_chess_subset[,3:7]))[1]
calculateAvg((df_chess_subset[,3:7]))[,1]
calculateAvg((df_chess_subset[,3:7]))[1,]
calculateAvg <- function(x){
# return(mean
#        (as.numeric(lapply(x[x>0], function(x) df_chess_subset[x,"Rating"])))       )
return(list(x))
# player <- str_extract_all(x,"\\d{1,}")
#   return(c(player,length(player),nchar(player)))
#  lapply(x, )
#  if(!str_detect(x,"\\d")){return(NA)}
#   else return(df_chess_avg[unlist(player),"new"])
}
calculateAvg((df_chess_subset[,3:7]))
calculateAvg((df_chess_subset[3:7]))
lapply(df_chess_subset[3:7], function(x) calculateAvg((unlist(x))))
lapply(as.vector(df_chess_subset[3:7]), function(x) calculateAvg((unlist(x))))
lapply(as.vector(df_chess_subset[,3:7]), function(x) calculateAvg((unlist(x))))
<span style="color:blue">**Load the packages later use**</span><br>
install.packages("ggplot2")
install.packages("tidyr")
install.packages("devtools")
devtools::install_github("hadley/tidyr")
require(tidyr)
require(dplyr)
require(knitr)
require(ggplot2)
require(dplyr)
require(knitr)
require(ggplot2)
airline <- read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
kable(airline)
airline <- read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
kable(airline)
require(tidyr)
require(dplyr)
require(knitr)
require(ggplot2)
airline <- read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
kable(airline)
read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
pwd
setwd()
read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
setwd("~/GitHub/R-Workshop")
read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
airline <- read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
airline <- read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
airline
airline_delayed <- airline %>%
gather("ArrivalCity", "Flights", 3:7) %>%
arrange(Airline) %>%
filter(ArrivalStatus == "delayed") %>%
select(Airline, ArrivalCity, Flights)
library(magrittr)
airline_delayed <- airline %>%
gather("ArrivalCity", "Flights", 3:7) %>%
arrange(Airline) %>%
filter(ArrivalStatus == "delayed") %>%
select(Airline, ArrivalCity, Flights)
library(tidyr)
library(dplyr)
library(magrittr)
library(knitr)
library(ggplot2)
airline <- read.csv(file = "airline_arrivals.csv", stringsAsFactors = FALSE)
airline_delayed <- airline %>%
gather("ArrivalCity", "Flights", 3:7) %>%
arrange(Airline) %>%
filter(ArrivalStatus == "delayed") %>%
select(Airline, ArrivalCity, Flights)
airline_ontime<- airline %>%
gather("ArrivalCity", "Flights", 3:7) %>%
arrange(Airline) %>%
filter(ArrivalStatus == "on time") %>%
select(Airline, ArrivalCity, Flights)
airline_delayed["DelayRate"] <- round(airline_delayed$Flights / (airline_delayed$Flights+airline_ontime$Flights),2)
airline_delayed
ggplot(airline_delayed, aes(x = factor(ArrivalCity), y=Flights, fill=factor(Airline)), color=factor(Airline))
+ stat_summary(fun.y=mean,position=position_dodge(),geom="bar")
+ labs(title = "Delay in Numbers")
ggplot(airline_delayed, aes(x = factor(ArrivalCity), y=Flights, fill=factor(Airline)), color=factor(Airline))
+ stat_summary(fun.y=mean,position=position_dodge(),geom="bar")
+ labs(title = "Delay in Numbers")
airline_delayed["DelayRate"] <- round(airline_delayed$Flights / (airline_delayed$Flights+airline_ontime$Flights),2)
kable(airline_delayed)
ggplot(airline_delayed, aes(x = factor(ArrivalCity), y=Flights, fill=factor(Airline)), color=factor(Airline))
+ stat_summary(fun.y=mean,position=position_dodge(),geom="bar")
require(ggplot2)
ggplot(airline_delayed, aes(x = factor(ArrivalCity), y=Flights, fill=factor(Airline)), color=factor(Airline))
+ stat_summary(fun.y=mean,position=position_dodge(),geom="bar")
+ labs(title = "Delay in Numbers")
ggplot()
ggplot(airline_delayed, aes(x = factor(ArrivalCity), y=Flights, fill=factor(Airline)), color=factor(Airline))
d <- ggplot(airline_delayed, aes(x = factor(ArrivalCity), y=Flights, fill=factor(Airline)), color=factor(Airline))
d
ggplot(airline_delayed, aes(x = factor(ArrivalCity))
)
ggplot(airline_delayed, aes(x = ArrivalCity))
p <- ggplot(airline_delayed, aes(fill=group, y=ArrivalCity, x=Flights))
p + geom_bar(position="dodge", stat="identity")
p <- ggplot(airline_delayed, aes(fill=Airline, y=ArrivalCity, x=Flights))
p + geom_bar(position="dodge", stat="identity")
p <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=Flights))
p + geom_bar(position="dodge", stat="identity")
ggplot(airline_delayed, aes(x = factor(ArrivalCity), y=Flights, fill=factor(Airline)), color=factor(Airline))
+ geom_bar(position="dodge", stat="identity")
+ labs(title = "Delay in Numbers")
p <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=Flights))
p + geom_bar(position="dodge", stat="identity") + labs(title = "Delay in Numbers")
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")
+ labs(title = "Delay in Percentages")
+scale_fill_brewer(palette="Set2")
p2 + geom_bar(position="dodge", stat="identity")
+ labs(title = "Delay in Percentages")
+ scale_fill_brewer(palette="Set2")
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")
+ labs(title = "Delay in Percentages")
+ scale_fill_brewer(palette="Set2")
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")
+ labs(title = "Delay in Percentages")
+ scale_fill_brewer()
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")
+ labs(title = "Delay in Percentages")
+ scale_fill_brewer()
#ggplot(airline_delayed
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")  + scale_fill_brewer()
+ labs(title = "Delay in Percentages")
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")  + scale_fill_brewer(palette="Set2")
+ labs(title = "Delay in Percentages")
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")
+ labs(title = "Delay in Percentages")
# Plot airlines by percentage of delays
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")  + labs(title = "Delay in Percentages")
p2 <- ggplot(airline_delayed, aes(fill=Airline, x=ArrivalCity, y=DelayRate))
p2 + geom_bar(position="dodge", stat="identity")  + scale_fill_brewer(palette="Set2") + labs(title = "Delay in Percentages")
